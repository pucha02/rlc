{"version":3,"file":"static/js/106.d313288c.chunk.js","mappings":"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","sources":["services/AdminPanel/teacher_schedule/BookingList/BookingList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker'; // Import DatePicker\r\nimport 'react-datepicker/dist/react-datepicker.css'; // Import DatePicker CSS\r\nimport './BookingList.css'; // Import the CSS file\r\n\r\nfunction BookingList() {\r\n  const [teacherOrders, setTeacherOrders] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null); // First calendar date selection\r\n  const [highlightedDates, setHighlightedDates] = useState([]); // Store dates with bookings for first calendar\r\n  const [selectedBookingDate, setSelectedBookingDate] = useState(new Date()); // Second calendar for booking levels\r\n  const [highlightedBookingDates, setHighlightedBookingDates] = useState([]); // Highlighted booking level dates\r\n  const location = useLocation();\r\n  const { booking, lang, level, teacherId, lessonTypes, schoolId } = location.state || {};\r\n\r\n  useEffect(() => {\r\n    getTeachersOrder();\r\n    collectBookingDates(); // Collect dates for the second calendar\r\n  }, []);\r\n\r\n  const getTeachersOrder = async () => {\r\n    try {\r\n      const response = await axios.get('http://13.60.221.226/api/teacherOrders', {\r\n        params: { teacherId, lessonTypes }\r\n      });\r\n      if (response.status === 200) {\r\n        setTeacherOrders(response.data);\r\n\r\n        const datesToHighlight = response.data.flatMap(order =>\r\n          order.time.filter(el => el.lang == lang && el.levelName == level && el.lessonTypes == lessonTypes && el.teacherId == teacherId).map(t => resetTime(new Date(t.time))) // Reset time to 00:00:00\r\n        );\r\n        setHighlightedDates(datesToHighlight);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching teacher orders:', error);\r\n    }\r\n  };\r\n\r\n  const collectBookingDates = () => {\r\n    if (booking?.level) {\r\n      const dates = booking.level\r\n        .filter(levels => levels.levelName === level)\r\n        .flatMap(level =>\r\n          level.lessonTypes\r\n            .filter(type => type.typeName === lessonTypes)\r\n            .flatMap(type => type.date.map(d => resetTime(new Date(d.d))))\r\n        );\r\n      setHighlightedBookingDates(dates);\r\n    }\r\n  };\r\n\r\n  const resetTime = (date) => {\r\n    const newDate = new Date(date);\r\n    newDate.setHours(0, 0, 0, 0);\r\n    return newDate;\r\n  };\r\n\r\n  const filterByDate = (orders) => {\r\n    if (!selectedDate) return orders;\r\n    const selectedDateString = resetTime(selectedDate).toISOString().split('T')[0];\r\n\r\n    return orders.filter(order =>\r\n      order.time.some(el => resetTime(new Date(el.time)).toISOString().split('T')[0] === selectedDateString)\r\n    );\r\n  };\r\n\r\n  // Handle payment status change\r\n  const handlePaymentStatusChange = async (orderId, teacherId, lang, levelName, lessonTypes, time, newStatus) => {\r\n    try {\r\n      // Обновляем локально\r\n      setTeacherOrders(prevOrders =>\r\n        prevOrders.map(order => {\r\n          if (order._id === orderId) {\r\n            return {\r\n              ...order,\r\n              time: order.time.map(timeEntry =>\r\n                timeEntry.time === time ? { ...timeEntry, payment_status: newStatus } : timeEntry\r\n              )\r\n            };\r\n          }\r\n          return order;\r\n        })\r\n      );\r\n\r\n      // Отправляем обновление на сервер\r\n      await axios.put(`http://13.60.221.226/api/updatePaymentStatus`, {\r\n        orderId,\r\n        teacherId,\r\n        lang,\r\n        levelName,\r\n        lessonTypes,\r\n        time,\r\n        newStatus\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating payment status:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTimeEntry = async (orderId, teacherId, lang, levelName, lessonTypes, time) => {\r\n    try {\r\n      // Выполняем запрос на удаление\r\n      await axios.delete(`http://13.60.221.226/api/deleteTimeEntry`, {\r\n        data: { orderId, teacherId, lang, levelName, lessonTypes, time }\r\n      });\r\n\r\n      // Обновляем локальное состояние\r\n      setTeacherOrders(prevOrders =>\r\n        prevOrders.map(order => {\r\n          if (order._id === orderId) {\r\n            // Возвращаем новый массив time без удаленного элемента\r\n            return {\r\n              ...order,\r\n              time: order.time.filter(\r\n                timeEntry =>\r\n                  !(timeEntry.teacherId === teacherId &&\r\n                    timeEntry.lang === lang &&\r\n                    timeEntry.levelName === levelName &&\r\n                    timeEntry.lessonTypes === lessonTypes &&\r\n                    timeEntry.time === time)\r\n              )\r\n            };\r\n          }\r\n          return order;\r\n        })\r\n      );\r\n\r\n    } catch (error) {\r\n      console.error('Error deleting time entry:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const filterByBookingDate = () => {\r\n    if (!selectedBookingDate) return booking?.level;\r\n    const selectedDateString = resetTime(selectedBookingDate).toISOString().split('T')[0];\r\n\r\n    return booking?.level\r\n      .filter(levels => levels.levelName === level)\r\n      .map(level => ({\r\n        ...level,\r\n        lessonTypes: level.lessonTypes\r\n          .filter(type => type.typeName === lessonTypes)\r\n          .map(type => ({\r\n            ...type,\r\n            date: type.date.filter(d => resetTime(new Date(d.d)).toISOString().split('T')[0] === selectedDateString)\r\n          }))\r\n      }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"booking-list-container\">\r\n      <h1 className=\"booking-list-title\">{lang} / {level} / {lessonTypes}</h1>\r\n      <Link\r\n        to=\"/add-booking\"\r\n        state={{ booking, lang, level, teacherId, lessonTypes, schoolId }}\r\n        className=\"add-booking-btn\"\r\n      >\r\n        Add New Booking\r\n      </Link>\r\n\r\n      <div className='teachersContent'>\r\n        <div className='myBookings'>\r\n          <h3>Записані учні</h3>\r\n          <div className=\"date-picker-container\">\r\n            <DatePicker\r\n              selected={selectedDate}\r\n              onChange={(date) => setSelectedDate(date)}\r\n              dateFormat=\"yyyy-MM-dd\"\r\n              isClearable\r\n              placeholderText=\"Select a date to filter\"\r\n              inline // Keep the calendar always open\r\n              highlightDates={highlightedDates} // Highlight the dates with orders\r\n            />\r\n          </div>\r\n\r\n          <div className=\"booking-items\">\r\n            {filterByDate(teacherOrders).flatMap(order =>\r\n              order.time.filter(el => {\r\n                const elDate = resetTime(new Date(el.time)).toISOString().split('T')[0];\r\n                const selectedDateString = selectedDate ? resetTime(selectedDate).toISOString().split('T')[0] : null;\r\n\r\n                return el.lang === lang\r\n                  && el.levelName === level\r\n                  && el.lessonTypes === lessonTypes\r\n                  && el.teacherId === teacherId\r\n                  && (!selectedDate || elDate === selectedDateString);\r\n              }).map((el, id) => (\r\n                <div className='teachers-student-block' key={id}>\r\n\r\n                  <div className='teachers-student-time'>\r\n                    {new Date(el.time).toLocaleDateString()}{' '}\r\n                    {`${String(new Date(el.time).getUTCHours()).padStart(2, '0')}:${String(new Date(el.time).getUTCMinutes()).padStart(2, '0')}:${String(new Date(el.time).getUTCSeconds()).padStart(2, '0')}`}\r\n                  </div>\r\n\r\n                  <div className='select'>\r\n                    <select\r\n                      value={el.payment_status}\r\n                      onChange={(e) => handlePaymentStatusChange(\r\n                        order._id,\r\n                        el.teacherId, // Добавьте teacherId\r\n                        el.lang, // Добавьте lang\r\n                        el.levelName, // Добавьте levelName\r\n                        el.lessonTypes, // Добавьте lessonTypes\r\n                        el.time, // Используйте el.time\r\n                        e.target.value // Новый статус\r\n                      )}\r\n                    >\r\n                      <option value=\"Не оплачено\">Не оплачено</option>\r\n                      <option value=\"Оплачено\">Оплачено</option>\r\n                    </select>\r\n                  </div>\r\n\r\n\r\n                  <div className='delete-btn' onClick={() => handleDeleteTimeEntry(\r\n                    order._id,\r\n                    el.teacherId,\r\n                    el.lang,\r\n                    el.levelName,\r\n                    el.lessonTypes,\r\n                    el.time)}>\r\n                    ✖</div>\r\n\r\n                  <div className='students-names'>\r\n                    {el.students.map((std, index) => (\r\n                      <div className='students-names-els' key={index}>\r\n                        <p>{std.name}</p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className='myCalendar'>\r\n          <h3>Мій графік</h3>\r\n          <div className=\"date-picker-container\">\r\n            <DatePicker\r\n              selected={selectedBookingDate}\r\n              onChange={(date) => setSelectedBookingDate(date)}\r\n              dateFormat=\"yyyy-MM-dd\"\r\n              isClearable\r\n              placeholderText=\"Select a date to filter levels\"\r\n              inline\r\n              highlightDates={highlightedBookingDates}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"booking-items\">\r\n            {filterByBookingDate()?.map((level) =>\r\n              level.lessonTypes.map((type) =>\r\n                type.date.map((date, index) => (\r\n                  <Link\r\n                    to={`/edit-booking/${date.d}`}\r\n                    state={{ date, lang, level, teacherId, lessonTypes, schoolId }}\r\n                    className=\"booking-link\"\r\n                    key={index}\r\n                  >\r\n                    <div className=\"booking-item\">\r\n                      <p>{new Date(date.d).toLocaleDateString()}</p> {/* Format date */}\r\n                    </div>\r\n                  </Link>\r\n                ))\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default BookingList;\r\n"],"names":["_filterByBookingDate","teacherOrders","setTeacherOrders","useState","selectedDate","setSelectedDate","highlightedDates","setHighlightedDates","selectedBookingDate","setSelectedBookingDate","Date","highlightedBookingDates","setHighlightedBookingDates","location","useLocation","booking","lang","level","teacherId","lessonTypes","schoolId","state","useEffect","getTeachersOrder","collectBookingDates","async","response","axios","get","params","status","data","datesToHighlight","flatMap","order","time","filter","el","levelName","map","t","resetTime","error","console","dates","levels","type","typeName","date","d","newDate","setHours","_jsxs","className","children","_jsx","Link","to","DatePicker","selected","onChange","dateFormat","isClearable","placeholderText","inline","highlightDates","orders","selectedDateString","toISOString","split","some","filterByDate","elDate","id","toLocaleDateString","String","getUTCHours","padStart","getUTCMinutes","getUTCSeconds","value","payment_status","e","orderId","newStatus","prevOrders","_id","timeEntry","put","handlePaymentStatusChange","target","onClick","delete","handleDeleteTimeEntry","students","std","index","name","filterByBookingDate"],"sourceRoot":""}