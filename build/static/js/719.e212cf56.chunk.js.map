{"version":3,"file":"static/js/719.e212cf56.chunk.js","mappings":"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","sources":["common/utils/smallFn/convertDate.js","common/utils/smallFn/calculateTimes.js","pages/chooseDate/testCalendarWithDatePickerDefault.jsx","pages/chooseDate/date.jsx"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { toZonedTime  } from 'date-fns-tz';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nfunction translateUkrainianMonthToEnglish(month) {\r\n    const months = {\r\n        \"січня\": \"January\",\r\n        \"лютого\": \"February\",\r\n        \"березня\": \"March\",\r\n        \"квітня\": \"April\",\r\n        \"травня\": \"May\",\r\n        \"червня\": \"June\",\r\n        \"липня\": \"July\",\r\n        \"серпня\": \"August\",\r\n        \"вересня\": \"September\",\r\n        \"жовтня\": \"October\",\r\n        \"листопада\": \"November\",\r\n        \"грудня\": \"December\"\r\n    };\r\n\r\n    return months[month];\r\n}\r\n\r\nfunction parseUkrainianDate(dateStr) {\r\n    const cleanedDateStr = dateStr.replace('р.', '').replace('о', '').trim();\r\n    \r\n    const [day, monthUkr, year, time, time2, time3] = cleanedDateStr.split(' ');\r\n   \r\n    const monthEng = translateUkrainianMonthToEnglish(monthUkr);\r\n\r\n    // const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}.000+00:00`;\r\n    const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}`;\r\n\r\n    return new Date(formattedDateStr).toUTCString();\r\n}\r\n\r\n\r\n\r\nconst formatDateToUkrainian = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const day = date.getUTCDate();\r\n    const monthNames = ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня'];\r\n    const month = monthNames[date.getUTCMonth()];\r\n    const year = date.getUTCFullYear();\r\n    const hours = String(date.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n  \r\n    return `${day} ${month} ${year} р. о ${hours}:${minutes}`;\r\n  };\r\n\r\nexport {parseUkrainianDate, formatDateToUkrainian};","const calculateCombinedWorkTime = (workTimes) => {\r\n   \r\n    const sortedTimes = workTimes.map(time => new Date(time)).sort((a, b) => a - b);\r\n\r\n    const combined = [];\r\n    let currentInterval = null;\r\n\r\n    sortedTimes.forEach(time => {\r\n        if (!currentInterval) {\r\n            currentInterval = [time, time]; // Start a new interval\r\n        } else {\r\n            // If the current time is within or adjacent to the current interval, extend it\r\n            if (time <= currentInterval[1]) {\r\n                currentInterval[1] = new Date(Math.max(currentInterval[1], time)); // Extend the end time\r\n            } else {\r\n                // Otherwise, push the current interval to the combined list and start a new interval\r\n                combined.push(currentInterval);\r\n                currentInterval = [time, time];\r\n            }\r\n        }\r\n    });\r\n\r\n    if (currentInterval) {\r\n        combined.push(currentInterval);\r\n\r\n    }\r\n\r\n    return combined.map(([start]) => ({ start }));\r\n};\r\n\r\nconst calculateNonWorkTime = (nonWorkTime, workTimes) => {\r\n\r\n    workTimes = workTimes.map(wt => {\r\n        if (!wt.start) {\r\n            console.error('Missing time in workTimes:', wt); // Log missing time\r\n            return null; // Skip or return a default value\r\n        }\r\n        const adjustedTime = new Date(wt.start.getTime() - 3 * 60 * 60 * 1000);\r\n        return { ...wt, time: adjustedTime };\r\n    }).filter(wt => wt !== null) // Filter out any null values\r\n        .sort((a, b) => new Date(a.time) - new Date(b.time));\r\n\r\n    if (workTimes.length === 0) {\r\n        console.error('No valid work times available');\r\n        return []; // Return an empty array if there are no valid work times\r\n    }\r\n\r\n    const nonWorkTimes = [];\r\n\r\n    const startOfDay = new Date(new Date(workTimes[0].time).setHours(0, 0, 0, 0));\r\n    console.log(startOfDay)\r\n    const firstWorkTime = new Date(workTimes[0].time);\r\n\r\n    if (startOfDay < firstWorkTime) {\r\n        nonWorkTimes.push({\r\n            start: startOfDay,\r\n            end: new Date(firstWorkTime.getTime() - 60 * 1000) // 1 minute before work starts\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < workTimes.length; i++) {\r\n        const currentStart = new Date(workTimes[i].time);\r\n\r\n        if (workTimes[i].slots === 0) {\r\n            const nextStart = (i < workTimes.length - 1) ? new Date(workTimes[i + 1].time) : new Date(currentStart.setHours(23, 59, 0, 0));\r\n            nonWorkTimes.push({\r\n                start: currentStart,\r\n                end: new Date(nextStart.getTime() - 60 * 1000)\r\n            });\r\n        } else {\r\n            if (i > 0 && workTimes[i - 1].slots !== 0) {\r\n                const previousEnd = new Date(workTimes[i - 1].time);\r\n                if (previousEnd < currentStart) {\r\n                    nonWorkTimes.push({\r\n                        start: new Date(previousEnd.getTime() + 60 * 60 * 1000 - 60 * 1000 * 59), // 1 minute after 1 hour\r\n                        end: new Date(currentStart.getTime() - 60 * 1000)  // 1 minute before the current work interval\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const lastWorkTime = new Date(workTimes[workTimes.length - 1].time);\r\n    const endOfDay = new Date(lastWorkTime);\r\n    endOfDay.setHours(23, 59, 0, 0);\r\n\r\n    if (lastWorkTime < endOfDay) {\r\n        nonWorkTimes.push({\r\n            start: new Date(lastWorkTime.getTime() + 60 * 60 * 1000 - 60 * 1000 * 59),\r\n            end: endOfDay\r\n        });\r\n    }\r\n\r\n    const mergedNonWorkTime = [...nonWorkTimes];\r\n    const uniqueNonWorkTime = Array.from(\r\n        new Set(mergedNonWorkTime.map(nwt => `${nwt.start}-${nwt.end}`))\r\n    ).map(str => {\r\n        const [start, end] = str.split('-');\r\n        return { start: new Date(start), end: new Date(end) };\r\n    });\r\n    console.log(uniqueNonWorkTime)\r\n    return uniqueNonWorkTime;\r\n};\r\n\r\n\r\nconst mergeWorkAndNonWorkTimes = (data, count) => {\r\n\r\n    const grouped = data.reduce((acc, booking) => {\r\n        const dateKey = booking.d;\r\n\r\n        if (!acc[dateKey]) {\r\n            acc[dateKey] = {\r\n                ...booking,\r\n                workTime: [...booking.workTime],\r\n                nonWorkTime: [...booking.nonWorkTime],\r\n                allSlots: booking.allSlots || 0,\r\n            };\r\n        } else {\r\n\r\n            acc[dateKey].workTime = [...acc[dateKey].workTime, ...booking.workTime];\r\n            acc[dateKey].nonWorkTime = [...new Set([...acc[dateKey].nonWorkTime, ...booking.nonWorkTime])]; // Unique nonWorkTime\r\n            acc[dateKey].allSlots += booking.allSlots || 0;\r\n        }\r\n        return acc;\r\n    }, {});\r\n    // Recalculate non-working intervals\r\n    return Object.values(grouped).map((booking) => {\r\n        const allWorkTimes = [];\r\n        const nonTimes = [];\r\n    \r\n        // Check if all work times have slots < 4\r\n        let allSlotsLessThanFour = booking.workTime.every(wt => wt.slots < count);\r\n    \r\n        // Flag to ensure `booking.d` is pushed only once\r\n        let bookingDAdded = false;\r\n    \r\n        booking.workTime.forEach((wt) => {\r\n            if (wt.slots >= count && wt.time) {\r\n                allWorkTimes.push(wt.time);\r\n            } else if (booking.allSlots <= 0 && wt.time) {\r\n                const currentDate = wt.time.split('T')[0] + 'T00:00:00.000Z';\r\n                allWorkTimes.push(currentDate);\r\n            } else if (allSlotsLessThanFour && !bookingDAdded) {\r\n                allWorkTimes.push(booking.d);\r\n                booking.allSlots = 0\r\n                bookingDAdded = true; // Set the flag to true after adding booking.d\r\n            }\r\n        });\r\n        \r\n        const combinedWorkTime = calculateCombinedWorkTime(allWorkTimes);\r\n        const nonWorkTime = calculateNonWorkTime(booking.nonWorkTime, combinedWorkTime);\r\n        \r\n        return {\r\n            ...booking,\r\n            workTime: combinedWorkTime,\r\n            nonWorkTime,\r\n            allSlots: booking.allSlots,\r\n        };\r\n    });\r\n    \r\n};\r\n\r\nexport { calculateCombinedWorkTime, calculateNonWorkTime, mergeWorkAndNonWorkTimes }","import '@mobiscroll/react/dist/css/mobiscroll.min.css';\r\nimport { Datepicker, Page, setOptions, localeUa } from '@mobiscroll/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { mergeWorkAndNonWorkTimes } from '../../common/utils/smallFn/calculateTimes';\r\nimport { parseUkrainianDate } from '../../common/utils/smallFn/convertDate';\r\nimport LogoImg from '../../services/images/Group12.svg'\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport './date.css'\r\n\r\nsetOptions({\r\n  locale: localeUa,\r\n  theme: 'ios',\r\n  themeVariant: 'light'\r\n});\r\n\r\nfunction Calendar2({ HandleFinish, final, teacherId, teacherName, schoolId }) {\r\n  const [dates, setDates] = useState([]);\r\n  const [multiple, setMultiple] = useState([]);\r\n  const min = '2024-01-01T00:00';\r\n  const max = '2024-12-15T00:00';\r\n  const [datetimeLabels, setDatetimeLabels] = useState([]);\r\n  const [datetimeInvalid, setDatetimeInvalid] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n  const [freeSlot, setFreeSlot] = useState([])\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n  const { lessonTypes } = location.state || {};\r\n  const { count } = location.state || {};\r\n\r\n  console.log(count, lessonTypes, allTeachers, level)\r\n\r\n  const handlePageLoadingDatetime = useCallback(() => {\r\n    const invalid = [];\r\n    const labels = [];\r\n\r\n    date.forEach(booking => {\r\n\r\n      const d = new Date(booking.d);\r\n      const localDate = new Date(d.getTime() + d.getTimezoneOffset() * 60000);\r\n      if (booking.allSlots > 0) {\r\n\r\n        labels.push({\r\n          start: localDate,\r\n          title: booking.allSlots + ' SPOTS',\r\n          textColor: '#e1528f',\r\n        });\r\n        invalid.push(...booking.nonWorkTime);\r\n      } else {\r\n        invalid.push(localDate);\r\n      }\r\n    });\r\n    console.log(invalid)\r\n\r\n\r\n    setDatetimeLabels(labels);\r\n    setDatetimeInvalid(invalid);\r\n  }, [date]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (teacherDate) {\r\n          const teacherDates = teacherDate[0].level.filter(lv => lv.levelName === level)[0].lessonTypes.filter(ls => ls.typeName == lessonTypes);\r\n\r\n          teacherDates[0].date.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n          const workTimes = teacherDates[0].date.flatMap(time => time.workTime);\r\n          setFreeSlot(workTimes)\r\n\r\n          setDate(mergeWorkAndNonWorkTimes(teacherDates[0].date, count));\r\n\r\n\r\n        } else if (allTeachers) {\r\n\r\n          allTeachers.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n          const workTimes = allTeachers.flatMap(time => time.workTime);\r\n          const mergedTeachers = mergeWorkAndNonWorkTimes(allTeachers, count);\r\n          setDate(mergedTeachers);\r\n          setFreeSlot(workTimes)\r\n          console.log(workTimes)\r\n        }\r\n\r\n        const storedDates = localStorage.getItem('selectedDates');\r\n        if (storedDates) {\r\n          setMultiple(JSON.parse(storedDates));\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch bookings', err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  useEffect(() => {\r\n    handlePageLoadingDatetime();\r\n  }, [date, handlePageLoadingDatetime]); // Update datetime labels and invalid dates when date changes\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('selectedDates', JSON.stringify(dates));\r\n  }, [dates]);\r\n\r\n  const handleSaveDates = () => {\r\n    if (Array.isArray(multiple)) {\r\n      setDates((prevDates) => {\r\n        const newDates = multiple.map(formatDateTime);\r\n        const uniqueDates = [...new Set([...prevDates, ...newDates])]; // Убираем дубликаты\r\n        return uniqueDates;\r\n      });\r\n    } else {\r\n      console.error(\"Expected 'multiple' to be an array, but got:\", typeof multiple);\r\n    }\r\n  };\r\n\r\n\r\n  const handleChangeMultiple = useCallback((args) => {\r\n    let newValue = args.value;\r\n\r\n    if (newValue === null) {\r\n      setMultiple([]);\r\n    } else if (newValue instanceof Date) {\r\n      setMultiple([newValue]);\r\n    } else if (Array.isArray(newValue)) {\r\n      setMultiple(newValue);\r\n    } else {\r\n      console.error(\"Unexpected type for 'args.value':\", newValue);\r\n      setMultiple([]);\r\n    }\r\n  }, []);\r\n\r\n  const handleRemoveDate = (dateToRemove) => {\r\n    setDates((prevDates) => prevDates.filter(date => date !== dateToRemove));\r\n  };\r\n\r\n  const formatDateTime = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n    return new Date(dateString).toLocaleString('uk-UA', options);\r\n  };\r\n\r\n  return (\r\n    <Page className=\"md-calendar-booking\">\r\n\r\n      <div className=\"mbsc-form-group\">\r\n    \r\n        <div className=\"mbsc-form-group-title\">Select date & time</div>\r\n        <Datepicker\r\n          display=\"inline\"\r\n          controls={['calendar', 'timegrid']}\r\n          min={min}\r\n          max={max}\r\n          minTime=\"05:00\"\r\n          maxTime=\"23:59\"\r\n          stepMinute={10}\r\n          width={null}\r\n          labels={datetimeLabels}\r\n          invalid={datetimeInvalid}\r\n          onPageLoading={handlePageLoadingDatetime}\r\n          cssClass=\"booking-datetime\"\r\n          onChange={handleChangeMultiple}\r\n          multiple={true}\r\n        />\r\n        <button onClick={handleSaveDates}>Обрати</button>\r\n      </div>\r\n      <div className=\"selected-dates\">\r\n        <h3>Обрані записи:</h3>\r\n        {Array.isArray(dates) && dates.length > 0 ? (\r\n          <ul>\r\n            {dates.map((date, index) => {\r\n\r\n              const matchedItems = freeSlot.filter(item =>\r\n                new Date(new Date(item.time).getTime() + new Date(item.time).getTimezoneOffset() * 60000).getTime() === new Date(new Date(parseUkrainianDate(date))).getTime() && item.slots > 0\r\n              );\r\n\r\n              const totalSlots = matchedItems.reduce((sum, item) => sum + item.slots, 0); return (\r\n                <li key={index}>\r\n                  {date} {totalSlots && `(Вільних місць: ${totalSlots})`}\r\n                  <button className='delete-btn' onClick={() => handleRemoveDate(date)}>\r\n                    ✖\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n\r\n          </ul>\r\n        ) : (\r\n          <p>Немає обраних дат</p>\r\n        )}\r\n        <div className='next-btn'>\r\n          <Link to={HandleFinish()} state={{\r\n            lang_from_general_cal: final,\r\n            level: level,\r\n            teacherId: teacherId,\r\n            teacherName: teacherName,\r\n            lessonTypes: lessonTypes,\r\n            schoolId: schoolId,\r\n            count: count\r\n          }}>\r\n            <button disabled={dates.length === 0}>Далі</button>\r\n          </Link>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </Page>\r\n\r\n  );\r\n}\r\n\r\nexport default Calendar2;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Calendar2 from \"./testCalendarWithDatePickerDefault\";\r\nimport Footer from \"../../common/components/Footer/Footer\";\r\n\r\nconst Date = () => {\r\n\r\n  const [final, setFinal] = useState(null)\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n  const { lang } = location.state || {};\r\n  const { teacherId } = location.state || {};\r\n  const { teacherName } = location.state || {};\r\n  const { lessonTypes } = location.state || {};\r\n  const { schoolId } = location.state || {};\r\n  const { count } = location.state || {};\r\n\r\n  const HandleFinish = () => {\r\n    if (allTeachers) {\r\n      return `/teacher`;\r\n    } else if (teacherDate) {\r\n      return `/final`;\r\n    }\r\n\r\n  };\r\n \r\n\r\n  useEffect(() => {\r\n    const keys = Object.keys(localStorage);\r\n    localStorage.setItem('OrderId', [])\r\n    keys.forEach(key => {\r\n      if (key.startsWith('availableTimes_')) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    });\r\n    localStorage.setItem('selectedSlots', [])\r\n    if (teacherDate) {\r\n      setFinal(teacherDate[0].lang)\r\n    }\r\n    else if (allTeachers) {\r\n      localStorage.removeItem('selectedDates');\r\n      setFinal(lang)\r\n      console.log(lang)\r\n    }\r\n\r\n  }, [])\r\n  return (\r\n    <div className=\"calendar\">\r\n      <Calendar2 HandleFinish={HandleFinish} final={final} teacherId={teacherId} teacherName={teacherName} schoolId={schoolId} />\r\n      <div className=\"calendar-footer\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Date;\r\n"],"names":["parseUkrainianDate","dateStr","cleanedDateStr","replace","trim","day","monthUkr","year","time","time2","time3","split","monthEng","Date","toUTCString","formatDateToUkrainian","date","getUTCDate","getUTCMonth","getUTCFullYear","String","getUTCHours","padStart","getUTCMinutes","mergeWorkAndNonWorkTimes","data","count","grouped","reduce","acc","booking","dateKey","d","workTime","nonWorkTime","Set","allSlots","Object","values","map","allWorkTimes","allSlotsLessThanFour","every","wt","slots","bookingDAdded","forEach","push","currentDate","combinedWorkTime","workTimes","sortedTimes","sort","a","b","combined","currentInterval","Math","max","_ref","start","calculateCombinedWorkTime","calculateNonWorkTime","console","error","adjustedTime","getTime","filter","length","nonWorkTimes","startOfDay","setHours","log","firstWorkTime","end","i","currentStart","nextStart","previousEnd","lastWorkTime","endOfDay","mergedNonWorkTime","uniqueNonWorkTime","Array","from","nwt","str","setOptions","locale","localeUa","theme","themeVariant","HandleFinish","final","teacherId","teacherName","schoolId","dates","setDates","useState","multiple","setMultiple","datetimeLabels","setDatetimeLabels","datetimeInvalid","setDatetimeInvalid","setDate","freeSlot","setFreeSlot","location","useLocation","teacherDate","state","level","allTeachers","lessonTypes","handlePageLoadingDatetime","useCallback","invalid","labels","localDate","getTimezoneOffset","title","textColor","useEffect","async","teacherDates","lv","levelName","ls","typeName","total","item","flatMap","mergedTeachers","storedDates","localStorage","getItem","JSON","parse","err","fetchData","setItem","stringify","handleChangeMultiple","args","newValue","value","isArray","formatDateTime","dateString","toLocaleString","month","hour","minute","_jsxs","Page","className","children","_jsx","Datepicker","display","controls","min","minTime","maxTime","stepMinute","width","onPageLoading","cssClass","onChange","onClick","handleSaveDates","prevDates","newDates","index","totalSlots","sum","handleRemoveDate","dateToRemove","Link","to","lang_from_general_cal","disabled","setFinal","lang","keys","key","startsWith","removeItem","Calendar2","Footer"],"sourceRoot":""}